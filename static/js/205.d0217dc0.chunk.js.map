{"version":3,"file":"static/js/205.d0217dc0.chunk.js","mappings":"uKAmBA,IAduB,WACrB,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACjB,GAA0CC,EAAAA,EAAAA,KACxC,SAACC,GAAK,OAAKA,EAAMC,SAAS,IADpBC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAa,EAAbA,cAQxB,OAJAC,EAAAA,EAAAA,YAAU,WACRR,GAASS,EAAAA,EAAAA,IAAUX,GACrB,GAAG,CAACE,EAAUF,IAEP,CAAEO,QAAAA,EAASC,MAAAA,EAAOC,cAAAA,EAC3B,C,yJCgEA,WAAeG,EAAAA,EAAAA,IAtEE,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACXZ,GAAWC,EAAAA,EAAAA,MACjB,GAA0CY,EAAAA,EAAAA,KAAlCR,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAa,EAAbA,eAExBC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLR,EAAS,CAAEc,KAAM,qBACnB,CACF,GAAG,CAACd,IAEJ,IAAMe,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAOX,EAAgBA,EAAcW,MAAQ,GAC7CC,YAAaZ,EAAgBA,EAAcY,YAAc,IAE3DC,iBAAkBC,EAAAA,EAClBC,oBAAoB,EACpBC,SAAU,SAACC,GACTxB,GACEyB,EAAAA,EAAAA,IAAS,CACP3B,GAAIS,EAAcT,GAClBoB,MAAOM,EAAON,MACdC,YAAaK,EAAOL,eAGrBO,SACAC,MAAK,WACJhB,EAAS,IACX,GACJ,IAEF,OACE,UAAC,IAAI,CAACY,SAAUR,EAAOa,aAAa,WAClC,UAAC,UAAU,CAACC,UAAU,OAAOC,UAAU,4BAA2B,WAChE,SAAC,UAAU,qBACX,SAAC,YAAY,CACXhB,KAAK,OACLiB,KAAK,QACLC,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOS,OAAON,MACrBiB,YAAapB,EAAOqB,OAAOlB,SAE7B,SAAC,qBAAqB,CAACJ,KAAK,UAAS,SAClCC,EAAOqB,OAAOlB,YAGnB,UAAC,UAAU,CAACW,UAAU,OAAOC,UAAU,+BAA8B,WACnE,SAAC,UAAU,2BACX,SAAC,YAAY,CACXO,GAAG,WACHC,KAAM,EACNP,KAAK,cACLC,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOS,OAAOL,YACrBgB,YAAapB,EAAOqB,OAAOjB,eAE7B,SAAC,qBAAqB,CAACL,KAAK,UAAS,SAClCC,EAAOqB,OAAOjB,kBAGnB,SAAC,IAAO,CAACd,QAASA,EAASC,MAAOA,EAAM,UACtC,SAAC,IAAM,CAACiC,QAAQ,UAAUzB,KAAK,SAAQ,sBAM/C,G,qEC5EaO,EAAamB,EAAAA,KAAaC,MAAM,CAC3CvB,MAAOsB,EAAAA,KACJE,IAAI,EAAG,uCACPC,IAAI,GAAI,uCACRC,SAAS,YACZzB,YAAaqB,EAAAA,KAAaI,SAAS,a,wDCOrC,IAbkB,SAACC,GAUjB,OATgB,SAACC,GAGf,OAFuB5C,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM4C,SAAS,IAArDC,YAGN,SAACH,GAAS,UAAKC,KAEf,+CAEJ,CAEF,C","sources":["Hooks/use-post-details.js","Pages/EditPost.jsx","util/validationScheme.js","util/withGuard.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchPost } from \"../State/postSlice\";\n\nconst usePostDetails = () => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { loading, error, recordDetails } = useSelector(\n    (state) => state.postSlice\n  );\n\n  useEffect(() => {\n    dispatch(fetchPost(id));\n  }, [dispatch, id]);\n  \n  return { loading, error, recordDetails };\n};\n\nexport default usePostDetails;\n","import { useEffect } from \"react\";\nimport Loading from \"../Components/Loading\";\nimport { Button, Form } from \"react-bootstrap\";\nimport usePostDetails from \"../Hooks/use-post-details\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport { editPost } from \"../State/postSlice\";\nimport withGuard from \"../util/withGuard\";\nimport { PostScheme } from \"../util/validationScheme\";\n\nconst EditPost = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { loading, error, recordDetails } = usePostDetails();\n\n  useEffect(() => {\n    return () => {\n      dispatch({ type: \"posts/cleanRecord\" });\n    };\n  }, [dispatch]);\n\n  const formik = useFormik({\n    initialValues: {\n      title: recordDetails ? recordDetails.title : \"\",\n      description: recordDetails ? recordDetails.description : \"\",\n    },\n    validationSchema: PostScheme,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      dispatch(\n        editPost({\n          id: recordDetails.id,\n          title: values.title,\n          description: values.description,\n        })\n      )\n        .unwrap()\n        .then(() => {\n          navigate(\"/\");\n        });\n    },\n  });\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"title\"\n          onChange={formik.handleChange}\n          value={formik.values.title}\n          isInvalid={!!formik.errors.title}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {formik.errors.title}\n        </Form.Control.Feedback>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Label>Description</Form.Label>\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          name=\"description\"\n          onChange={formik.handleChange}\n          value={formik.values.description}\n          isInvalid={!!formik.errors.description}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {formik.errors.description}\n        </Form.Control.Feedback>\n      </Form.Group>\n      <Loading loading={loading} error={error}>\n        <Button variant=\"primary\" type=\"submit\">\n          Edit\n        </Button>\n      </Loading>\n    </Form>\n  );\n};\n\nexport default withGuard(EditPost);\n","import * as Yup from \"yup\";\n\n\nexport const PostScheme = Yup.object().shape({\n  title: Yup.string()\n    .min(2, \"Please Insert At Least 2 Characters\")\n    .max(50, \"Please Insert Maximum 50 Characters\")\n    .required(\"Required\"),\n  description: Yup.string().required(\"Required\"),\n});","import { useSelector } from \"react-redux\";\n\nconst withGuard = (Component) => {\n  const Wrapped = (props) => {\n    const { isLoggedIn } = useSelector((state) => state.authSlice);\n\n    return isLoggedIn ? (\n      <Component {...props} />\n    ) : (\n      <div>Please LogIn First</div>\n    );\n  };\n  return Wrapped;\n};\n\nexport default withGuard;\n"],"names":["id","useParams","dispatch","useDispatch","useSelector","state","postSlice","loading","error","recordDetails","useEffect","fetchPost","withGuard","navigate","useNavigate","usePostDetails","type","formik","useFormik","initialValues","title","description","validationSchema","PostScheme","enableReinitialize","onSubmit","values","editPost","unwrap","then","handleSubmit","className","controlId","name","onChange","handleChange","value","isInvalid","errors","as","rows","variant","Yup","shape","min","max","required","Component","props","authSlice","isLoggedIn"],"sourceRoot":""}