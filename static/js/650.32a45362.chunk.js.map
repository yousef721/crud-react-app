{"version":3,"file":"static/js/650.32a45362.chunk.js","mappings":"yOA6EA,WAAeA,EAAAA,EAAAA,IAlEC,WACd,OAA2BC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAAS,IAAzDC,EAAO,EAAPA,QAASC,EAAK,EAALA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,YAAa,IAEfC,iBAAkBC,EAAAA,EAClBC,SAAU,SAACC,GACT,IAAMC,EAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3Bd,GACEe,EAAAA,EAAAA,IAAW,CACTJ,GAAAA,EACAN,MAAOK,EAAOL,MACdC,YAAaI,EAAOJ,eAGrBU,SACAC,MAAK,kBAAMnB,EAAS,IAAI,IACxBoB,OAAM,SAACrB,GACNsB,QAAQC,IAAIvB,EACd,GACJ,IAGF,OACE,UAAC,IAAI,CAACY,SAAUP,EAAOmB,aAAa,WAClC,UAAC,UAAU,CAACC,UAAU,OAAOC,UAAU,4BAA2B,WAChE,SAAC,UAAU,qBACX,SAAC,YAAY,CACXC,KAAK,OACLC,KAAK,QACLC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOQ,OAAOL,MACrBwB,YAAa3B,EAAO4B,OAAOzB,SAE7B,SAAC,qBAAqB,CAACmB,KAAK,UAAS,SAClCtB,EAAO4B,OAAOzB,YAGnB,UAAC,UAAU,CAACiB,UAAU,OAAOC,UAAU,+BAA8B,WACnE,SAAC,UAAU,2BACX,SAAC,YAAY,CACXQ,GAAG,WACHC,KAAM,EACNP,KAAK,cACLC,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAOQ,OAAOJ,YACrBuB,YAAa3B,EAAO4B,OAAOxB,eAE7B,SAAC,qBAAqB,CAACkB,KAAK,UAAS,SAClCtB,EAAO4B,OAAOxB,kBAGnB,SAAC,IAAO,CAACV,QAASA,EAASC,MAAOA,EAAM,UACtC,SAAC,IAAM,CAACoC,QAAQ,UAAUT,KAAK,SAAQ,wBAM/C,G,qECxEahB,EAAa0B,EAAAA,KAAaC,MAAM,CAC3C9B,MAAO6B,EAAAA,KACJE,IAAI,EAAG,uCACPC,IAAI,GAAI,uCACRC,SAAS,YACZhC,YAAa4B,EAAAA,KAAaI,SAAS,a,wDCOrC,IAbkB,SAACC,GAUjB,OATgB,SAACC,GAGf,OAFuB/C,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM+C,SAAS,IAArDC,YAGN,SAACH,GAAS,UAAKC,KAEf,+CAEJ,CAEF,C","sources":["Pages/AddPost.jsx","util/validationScheme.js","util/withGuard.js"],"sourcesContent":["import { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { insertPost } from \"../State/postSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport {PostScheme} from \"../util/validationScheme\"\nimport Loading from \"../Components/Loading\";\nimport withGuard from \"../util/withGuard\";\n\n\n\nconst AddPost = () => {\n  const { loading, error } = useSelector((state) => state.postSlice);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      description: \"\",\n    },\n    validationSchema: PostScheme,\n    onSubmit: (values) => {\n      const id = Math.floor(Math.random() * 500);\n      dispatch(\n        insertPost({\n          id,\n          title: values.title,\n          description: values.description,\n        })\n      )\n        .unwrap()\n        .then(() => navigate(\"/\"))\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"title\"\n          onChange={formik.handleChange}\n          value={formik.values.title}\n          isInvalid={!!formik.errors.title}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {formik.errors.title}\n        </Form.Control.Feedback>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Label>Description</Form.Label>\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          name=\"description\"\n          onChange={formik.handleChange}\n          value={formik.values.description}\n          isInvalid={!!formik.errors.description}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {formik.errors.description}\n        </Form.Control.Feedback>\n      </Form.Group>\n      <Loading loading={loading} error={error}>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Loading>\n    </Form>\n  );\n};\n\nexport default withGuard(AddPost);\n","import * as Yup from \"yup\";\n\n\nexport const PostScheme = Yup.object().shape({\n  title: Yup.string()\n    .min(2, \"Please Insert At Least 2 Characters\")\n    .max(50, \"Please Insert Maximum 50 Characters\")\n    .required(\"Required\"),\n  description: Yup.string().required(\"Required\"),\n});","import { useSelector } from \"react-redux\";\n\nconst withGuard = (Component) => {\n  const Wrapped = (props) => {\n    const { isLoggedIn } = useSelector((state) => state.authSlice);\n\n    return isLoggedIn ? (\n      <Component {...props} />\n    ) : (\n      <div>Please LogIn First</div>\n    );\n  };\n  return Wrapped;\n};\n\nexport default withGuard;\n"],"names":["withGuard","useSelector","state","postSlice","loading","error","navigate","useNavigate","dispatch","useDispatch","formik","useFormik","initialValues","title","description","validationSchema","PostScheme","onSubmit","values","id","Math","floor","random","insertPost","unwrap","then","catch","console","log","handleSubmit","className","controlId","type","name","onChange","handleChange","value","isInvalid","errors","as","rows","variant","Yup","shape","min","max","required","Component","props","authSlice","isLoggedIn"],"sourceRoot":""}